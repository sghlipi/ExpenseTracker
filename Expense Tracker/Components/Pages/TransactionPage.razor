@page "/transaction"

@using Expense_Tracker.Model;
@using Expense_Tracker.Services;
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager

<!-- Transaction Page -->
<div  class="card shadow-sm">
<div  class="card-body">
    <h3 class="fw-bold text-uppercase fw-bold" style="color:black">Transaction List</h3>

    <!-- Date Filter -->
    <div class="d-flex align-items-center mb-3">
        <label for="startDate" class="me-2" >Start Date:</label>
        <input type="date" id="startDate" class="form-control me-3"  @bind="startDate" />

        <label for="endDate" class="me-2" >End Date:</label>
        <input type="date" id="endDate" class="form-control me-3"  @bind="endDate" />
    </div>

    <!-- Type Filter -->
    <div class="d-flex align-items-center mb-3">
        <label for="typeFilter" class="me-2" >Types:</label>
        <select id="typeFilter" class="form-control me-3"  @bind="SelectedType">
            <option value="">All Types</option>
            <option value="Expense">Expense</option>
            <option value="Income">Income</option>
            <option value="Debt">Debt</option>
        </select>
    </div>


    <!-- Tags Filter -->
    <div  class="d-flex align-items-center mb-3">
        <label for="tagsFilter" class="me-2" >Tags:</label>
        <select id="tagsFilter" class="form-control me-3"  @bind="SelectedTag">
            <option value="">All Tags</option>
            <option value="Food">Food</option>
            <option value="Travel">Travel</option>
            <option value="Utilities">Utilities</option>
            <option value="Shopping">Shopping</option>
        </select>
    </div>
        



    <!-- Buttons -->
    <div class="mb-3">
        <button @onclick="ApplyFilters" class="btn btn-primary">Apply Filters</button>
    </div>

    <!-- Display Error Message -->
    @if (!string.IsNullOrEmpty(filterErrorMessage))
    {
        <div class="error-message">@filterErrorMessage</div>
    }

    <!-- Search by title -->
    <div class="mb-3">
        <input type="text" @bind="searchQuery" placeholder="Search by title..." class="form-control" />
        <button @onclick="SearchByTitle" class="btn btn-primary mt-2">Search</button>
    </div>

    <!-- Clear button to reset all filters and search -->
    <div class="mb-3">
        <button @onclick="ClearFilters" class="btn btn-danger w-25 mt-3 ">Clear</button>
    </div>
    
    <!-- Add Transaction and Sorting Buttons -->
    <div class="d-flex mb-3">
        @* <input type="text" class="form-control me-2" placeholder="Search by Title..." @bind="searchQuery" @oninput="SearchTransactions" /> *@
        <button class="btn btn-primary me-3" @onclick="OpenModal">Add Transaction</button>
        <button  class="w-30 me-2 btn-warning" @onclick="ToggleSort">Date</button>
        <button class="w-30 btn-warning" @onclick="ToggleSortAmount">Amount</button>
    </div>

    <!-- Transaction Table -->
    <div class="table-responsive">
        <table class="table table-bordered align-middle">
            <thead class="table-light">
            <tr>
                <th>Title</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Tags</th>
                <th>Type</th>
                <th>Notes</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var transaction in recentTransactions)
            {
                <tr>
                    <td>
                        @if (transaction.IsEditing)
                        {
                            <input type="text" class="form-control" @bind="transaction.Title" />
                        }
                        else
                        {
                            @transaction.Title
                        }
                    </td>
                    <td>
                        @if (transaction.IsEditing)
                        {
                            <input type="number" class="form-control" @bind="transaction.Amount" />
                        }
                        else
                        {
                            @transaction.Amount
                        }
                    </td>
                    @* <td>@transaction.Date.ToString("yyyy-MM-dd")</td> *@
                    <td>
                        @if (transaction.IsEditing)
                        {
                            <input type="date" class="form-control" @bind="transaction.Date" />
                        }
                        else
                        {
                            @transaction.Date.ToString("yyyy-MM-dd")
                        }
                    </td>
                    <td>
                        @if (transaction.IsEditing)
                        {
                            <input type="text" class="form-control" @bind="transaction.Tags" />
                        }
                        else
                        {
                            @transaction.Tags
                        }
                    </td>
                    <td class="@(transaction.Type == "Income" ? "text-success" : transaction.Type == "Expense" ? "text-danger" : "text-warning")">
                        @if (transaction.IsEditing)
                        {
                            <select class="form-control" @bind="transaction.Type">
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Debt">Debt</option>
                            </select>
                        }
                        else
                        {
                            @transaction.Type
                        }
                    </td>
                    <td>
                        @if (transaction.IsEditing)
                        {
                            <input type="text" class="form-control" @bind="transaction.Notes" />
                        }
                        else
                        {
                            @transaction.Notes
                        }
                    </td>
                    <td>
                        @if (transaction.IsEditing)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => SaveEdit(transaction)">Save</button>
                            <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit(transaction)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditTransaction(transaction)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>
</div>

<!-- Debts List -->
<div class="card shadow-sm">
    <div class="card-body">
        <h3 class="fw-bold text-uppercase fw-bold">Debts List</h3>
        <div class="table-responsive">
            <table class="table table-bordered align-middle">
                <thead class="table-light">
                <tr>
                    <th>Title</th>
                    <th>Added Date</th>
                    <th>Due Date</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Status</th>
                    <th>Notes</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>

                @foreach (var debt in pendingDebts)
                {
                    <tr>
                        
                        <td> @if (debt.IsEditing)
                             {
                                 <input type="text" class="form-control" @bind="debt.Title" />
                             }
                             else
                             {
                                 @debt.Title
                             }
                        </td>
                        
                        <td>  @if (debt.IsEditing)
                              {
                                  <input type="date" class="form-control" @bind="debt.Date" />
                              }
                              else
                              {
                                  @debt.Date.ToString("yyyy-MM-dd")
                              }
                        </td>
                        
                        <td>@if (debt.IsEditing)
                            {
                                <input type="date" class="form-control" @bind="debt.DueDate" />
                            }
                            else
                            {
                                @debt.DueDate.ToString("yyyy-MM-dd")

                            }
                        </td>
                        
                        <td> @if (debt.IsEditing)
                             {
                                 <input type="number" class="form-control" @bind="debt.Amount" />
                             }
                             else
                             {
                                 @debt.Amount
                             }
                        </td>
                        
                        <td>@if (debt.IsEditing)
                            {
                                <input type="text" class="form-control" @bind="debt.Tags" />
                            }
                            else
                            {
                                @debt.Tags
                            }
                        </td>
                        
                        <td>
                            @if (debt.IsEditing)
                            {
                                <select class="form-control" @bind="debt.Status">
                                    <option value="Pending">Pending</option>
                                    <option value="Cleared">Cleared</option>
                                </select>
                            }
                            else
                            {
                            @if (string.IsNullOrEmpty(debt.Status))
                            {
                            <span class="badge bg-danger">Pending</span>
                            }
                            else if (debt.Status == "Cleared")
                            {
                            <span class="badge bg-success">Cleared</span>
                            }
                            }

                        </td>
                        

                        <td>@if (debt.IsEditing)
                            {
                                <input type="text" class="form-control" @bind="debt.Notes" />
                            }
                            else
                            {
                                @debt.Notes
                            } 
                        </td>
                        <td>
                            @if (debt.IsEditing)
                            {
                            <button class="btn btn-success btn-sm" @onclick="() => SaveEditDebt(debt)">Save</button>
                            <button class="btn btn-secondary btn-sm" @onclick="() => CancelEditDebt(debt)">Cancel</button>
                            }
                            else
                            {
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditDebt(debt)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteDebt(debt)">Delete</button>
                            }
                        </td>

                    </tr>

                }

                </tbody>
                
            </table>
        </div>
    </div>
</div>


@* Modal for Adding Transaction *@
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog " role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Transaction</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    
                    <div class="mb-3">
                        <label>Title</label>
                        <input type="text" class="form-control" @bind="newTransaction.Title" @oninput="ClearErrorMessage"/>
                    </div>
                    <div class="mb-3">
                        <label>Amount</label>
                        <input type="number" class="form-control" @bind="newTransaction.Amount" @oninput="ClearErrorMessage"/>
                    </div>
                    <div class="mb-3">
                        <label>Date</label>
                        <input type="date" class="form-control" @bind="newTransaction.Date"/>
                    </div>

                    <div class="mb-3">
                        <label>Tags</label>
                        <input type="text" class="form-control" @bind="newTransaction.Tags"/>
                    </div>
                    <div class="mb-3">
                        <label>Notes</label>
                        <input type="text" class="form-control" @bind="newTransaction.Notes"  @oninput="ClearErrorMessage"/>
                    </div>
                    <div class="mb-3">
                        <label>Type</label>
                        <select class="form-control" @bind="newTransaction.Type">
                            <option value="">Select Type</option>
                            <option value="Income">Income</option>
                            <option value="Expense">Expense</option>
                            <option value="Debt">Debt</option>
                        </select>
                    </div>
                    <div class="mb-3" style="display: @(newTransaction.Type == "Debt" ? "block" : "none")">
                        <label>Status</label>
                        <select class="form-control" @bind="newTransaction.Status">
                            <option value="Pending">Pending</option>
                            <option value="Cleared">Cleared</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
                }

            </div>
        </div>
    </div>
}


@code {

    private List<Transaction> recentTransactions = new();
    private List<Transaction> pendingDebts = new();
    private bool showModal = false;
    private Transaction newTransaction = new();
    private List<Transaction> filteredTransactions = new(); // Filtered list to display
    private bool isSortedAscending = false;
    private string searchQuery = ""; // Added search query field
    
    private DateTime? startDate;
    private DateTime? endDate;
    private string SelectedType;
    private string SelectedTag;
    private string filterErrorMessage;
    private bool displayFilters = false;
    private string errorMessage;
    
    
    protected override async Task OnInitializedAsync()
{
await LoadTransactions();
await LoadDebts(); 
filteredTransactions = new List<Transaction>(recentTransactions);
}

private void ApplyFilters()
{
    var filtered = recentTransactions;
    if (startDate.HasValue)
    {
        filtered = filtered.Where(t => t.Date >= startDate.Value).ToList();
    }

    if (endDate.HasValue)
    {
        filtered = filtered.Where(t => t.Date <= endDate.Value).ToList();
    }
    
    if (!string.IsNullOrEmpty(SelectedType))
    {
        filtered = filtered.Where(t => t.Type == SelectedType).ToList();
    }
    
    if (!string.IsNullOrEmpty(SelectedTag))
    {
        filtered = filtered.Where(t => t.Tags.Contains(SelectedTag)).ToList();
    }
    recentTransactions = filtered; // Update the recentTransactions directly with the filtered list
}


private void ClearFilters()// Clear method to reset search and filters
{
    searchQuery = ""; // Reset search query
    startDate = null;  // Reset start date filter
    endDate = null;    // Reset end date filter
    SelectedType = ""; // Reset type filter
    SelectedTag = "";  // Reset tag filter
    LoadTransactions();// Reload all transactions without any filters
}
    
    

private async Task LoadTransactions()
{
recentTransactions = await TransactionService.GetTransactionsAsync();

}


private async Task LoadDebts()
{
    var allDebts = await TransactionService.GetTransactionsAsync();
    pendingDebts = allDebts.Where(d => d.Type == "Debt").ToList();
}

// Search method based on title
private void SearchByTitle()
{
    if (!string.IsNullOrEmpty(searchQuery))
    {
        recentTransactions = recentTransactions
            .Where(t => t.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }
}
private void OpenModal()
{
    newTransaction = new Transaction(); // Reset form data
    newTransaction.Date = DateTime.Now;
    showModal = true;
}

private void CloseModal()
{
    showModal = false;
}
private async Task AddTransaction()
{
    try
    {

        // Validate the new transaction
        if (newTransaction == null)
        {
            errorMessage = "Transaction details cannot be null.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTransaction.Title))
        {
            errorMessage = "Title is required.";
            return;
        }

        if (newTransaction.Amount <= 0)
        {
            errorMessage = "Amount must be greater than zero.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newTransaction.Type))
        {
            errorMessage = "Transaction type is required.";
            return;
        }
        
        // Calculate total income and expense to determine available balance
        decimal totalIncome = await TransactionService.GetTotalIncomeAsync();
        decimal totalExpense = await TransactionService.GetTotalExpenseAsync();
        decimal totalBalance = totalIncome - totalExpense;

        // Check for sufficient balance if the transaction type is Debit (outflow)
        if (newTransaction.Type == "Expense")
        {
            // Ensure sufficient balance for Debit transactions (outflows)
            if (totalBalance < newTransaction.Amount)
            {
                errorMessage = "Insufficient balance. Cannot add this transaction.";
                Console.WriteLine(errorMessage);

                return;
            }

        }
        
       
        if (newTransaction.Type == "Debt" && newTransaction.Status == "Cleared")  // Check if this is a Debt and if it is being marked as 'Cleared'
        {
           
            if (totalBalance >= newTransaction.Amount)  // Ensure that the total income is sufficient to clear the debt
            {
                // Reduce the income by the amount of debt cleared
                totalIncome -= newTransaction.Amount;
                Console.WriteLine($"Income reduced by {newTransaction.Amount}. New total income: {totalIncome}");
                pendingDebts.RemoveAll(d => d.Title == newTransaction.Title && d.Amount == newTransaction.Amount);// Remove the debt from the pending debts list
                Console.WriteLine("Debt cleared and income updated.");
            }
            else
            {
                errorMessage = "Insufficient balance to clear the debt.";  // If the balance is insufficient to clear the debt, show an error message
                Console.WriteLine(errorMessage);
                return;
            }
        }
       

        // Add the transaction
        recentTransactions.Add(new Transaction
        {
            Title = newTransaction.Title,
            Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date,
            Amount = newTransaction.Amount,
            Type = newTransaction.Type,
            Tags = newTransaction.Tags,
            Notes = newTransaction.Notes,
            Status = newTransaction.Type == "Debt" ? (newTransaction.Status ?? "Pending") : null // Default to "Pending" for Debt
        });
        errorMessage = string.Empty;
        Console.WriteLine("Transaction added successfully.");
        ResetForm();



        if (newTransaction.Type == "Debt")
        {
           
            {
                // Create a new debt entry
                var newDebt = new Transaction
                {
                    Title = newTransaction.Title,
                    Date = newTransaction.Date,
                    DueDate = newTransaction.Date == default ? DateTime.Now.AddMonths(1) : newTransaction.Date,
                    Amount = newTransaction.Amount,
                    Tags = newTransaction.Tags,
                    Status = newTransaction.Status,
                    Notes = newTransaction.Notes // Assuming Notes are the source of the debt
                };

                // Add the new debt to the pending debts list
                await TransactionService.AddTransactionAsync(newDebt);
                pendingDebts.Add(newDebt);
                // newTransaction.Status = "Pending"; // Default status for new debts
            }


        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error adding transaction: {ex.Message}");
        errorMessage = $"An unexpected error occurred: {ex.Message}";
    }

    {
        CloseModal();
        
        newTransaction = new(); // Reset form
    }
} 

private void ClearErrorMessage()
{
    errorMessage = string.Empty;
}

private void ResetForm()
{
    newTransaction = new Transaction
    {
        Date = DateTime.Now,
        Type = string.Empty
    };
}


    private void EditTransaction(Transaction transaction)
{
transaction.IsEditing = true;
}

private void SaveEdit(Transaction transaction)
{
transaction.IsEditing = false;
}

private void CancelEdit(Transaction transaction)
{
transaction.IsEditing = false;
}

private void DeleteTransaction(Transaction transaction)
{
recentTransactions.Remove(transaction);
}



public void EditDebt(Transaction debt)
{
    debt.IsEditing = true;
}

public void SaveEditDebt(Transaction debt)
{
    debt.IsEditing = true;     // Logic to save the edited debt
}

public void CancelEditDebt(Transaction debt)
{
    debt.IsEditing = false;  // Logic to revert the changes made during editing
}

public void DeleteDebt(Transaction debt)
{
    pendingDebts.Remove(debt);  // Logic to delete the debt
}

private void ToggleSort()
{
    if (isSortedAscending)
    {
        // Sort in descending order
        recentTransactions = recentTransactions.OrderByDescending(t => t.Date).ToList();
    }
    else
    {
        // Sort in ascending order
        recentTransactions = recentTransactions.OrderBy(t => t.Date).ToList();
    }

    // Toggle the sort order for next click
    isSortedAscending = !isSortedAscending;
}

private void ToggleSortAmount()
{
    if (isSortedAscending)
    {
        // Sort in descending order
        recentTransactions = recentTransactions.OrderByDescending(t => t.Amount).ToList();
    }
    else
    {
        // Sort in ascending order
        recentTransactions = recentTransactions.OrderBy(t => t.Amount).ToList();
    }

    // Toggle the sort order for next click
    isSortedAscending = !isSortedAscending;
}

private void SortTransactionsByDate()
{
    // Sort transactions by Date in descending order
    recentTransactions = recentTransactions.OrderByDescending(t => t.Date).ToList();
}
    
private void SortTransactionsByAmount()
{
    // Sort transactions by Date in descending order
    recentTransactions = recentTransactions.OrderByDescending(t => t.Amount).ToList();
}
}
