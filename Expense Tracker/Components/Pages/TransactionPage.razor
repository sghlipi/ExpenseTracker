@page "/transaction"

@using Expense_Tracker.Model;
@using Expense_Tracker.Services;
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager

<!-- Transaction Highlight Section -->
<div class="card shadow-sm mb-4">
    <div class="card-body">
        <h5 class="card-title text-uppercase fw-bold">Transaction List</h5>
        <div class="table-responsive">
            <table class="table table-bordered align-middle">
                <thead class="table-light">
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Tags</th>
                    <th>Type</th>
                    <th>Notes</th>

                </tr>
                </thead>
                <tbody>

                @* <div class="transaction-list"> *@
                @foreach (var transaction in recentTransactions)
                {
                <tr>
                    <td>@transaction.Title</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                    <td>@transaction.Tags</td>
                    <td class="@(transaction.Type == "Income" ? "text-success" : transaction.Type == "Expense" ? "text-danger" : "text-warning")">@transaction.Type</td>
                    <td>@transaction.Notes</td>
                </tr>
              
                }
                </tbody>
            </table>
        </div>
    </div>
</div>
          
            <div  class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-uppercase fw-bold">Pending Debts</h5>
                    <div class="table-responsive">
                        <table class="table table-bordered align-middle">
                            <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Added Date</th>
                                <th>Due Date</th>
                                <th>Amount</th>
                                <th>Tags</th>
                                <th>Status</th>
                                <th>Source</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                @foreach (var debt in pendingDebts)
                                {
                                    <tr>
                                        <td>@debt.Title</td>
                                        <td>@debt.Date.ToString("yyyy-MM-dd")</td>
                                        <td>@debt.DueDate.ToString("yyyy-MM-dd")</td>
                                        <td>@debt.Amount</td>
                                        <td>@debt.Tags</td>
                                <td>
                                    @if (string.IsNullOrEmpty(debt.Status))
                                    {
                                    <span class="badge bg-secondary">Unknown</span>
                                    }
                                    else if (debt.Status == "Pending")
                                    {
                                    <span class="badge bg-warning text-dark">Pending</span>
                                    }
                                    else if (debt.Status == "Cleared")
                                    {
                                    <span class="badge bg-success">Cleared</span>
                                    }
                                </td>
                                
                                
                                <td>@debt.Source</td>
                                
                                    </tr>
                                
                                }

                            </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        
@* Modal for Adding Transaction *@
@if (showModal)
{
<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog "  role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Transaction</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label>Title</label>
                    <input type="text" class="form-control" @bind="newTransaction.Title" />
                </div>
                <div class="mb-3">
                    <label>Amount</label>
                    <input type="number" class="form-control" @bind="newTransaction.Amount" />
                </div>
                <div class="mb-3">
                    <label>Date</label>
                    <input type="date" class="form-control" @bind="newTransaction.Date" />
                </div>
                
                <div class="mb-3">
                    <label>Tags</label>
                    <input type="text" class="form-control" @bind="newTransaction.Tags" />
                </div>
                
                <div class="mb-3">
                    <label>Notes</label>
                    <input type="text" class="form-control" @bind="newTransaction.Notes" />
                </div>
                <div class="mb-3">
                    <label>Type</label>
                    <select class="form-control" @bind="newTransaction.Type">
                        <option value="">Select Type</option>
                        <option value="Income">Income</option>
                        <option value="Expense">Expense</option>
                        <option value="Debt">Debt</option>
                    </select>
                </div>
                <div class="mb-3" style="display: @(newTransaction.Type == "Debt" ? "block" : "none")">
                    <label>Status</label>
                    <select class="form-control" @bind="newTransaction.Status">
                        <option value="Pending">Pending</option>
                        <option value="Cleared">Cleared</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="AddTransaction">Add</button>
            </div>
        </div>
    </div>
</div>
}
@code{
private List<Transaction> recentTransactions = new List<Transaction>();
private Transaction newTransaction = new Transaction();
private bool showModal = false;
private List<Transaction> pendingDebts = new List<Transaction>();


private decimal totalIncome = 0;
private decimal totalExpense = 0;
private decimal totalDebt = 0;
private decimal totalBalance = 0;
private decimal pendingDebt = 0;
private decimal clearedDebt = 0;

protected override async Task OnInitializedAsync()
{
// Fetch the latest 5 transactions
recentTransactions = (await TransactionService.GetTransactionsAsync())
.OrderByDescending(t => t.Date)
.Take(5)
.ToList();

foreach (var transaction in recentTransactions)
{
Console.WriteLine($"Title: {transaction.Title}, Tags: {transaction.Tags}, Notes: {transaction.Notes}");
}

totalIncome = await TransactionService.GetTotalIncomeAsync();
totalExpense = await TransactionService.GetTotalExpenseAsync();
totalDebt = await TransactionService.GetTotalDebtAsync();
pendingDebt = await TransactionService.GetPendingDebtAsync();
clearedDebt = await TransactionService.GetClearedDebtAsync();
totalBalance = totalIncome - totalExpense + totalDebt;
}

private void OpenModal()
{
newTransaction = new Transaction(); // Reset form data
newTransaction.Date = DateTime.Now;
showModal = true;
}

private void CloseModal()
{
showModal = false;
}

private async Task  AddTransaction()
{
try
{
// Validate the new transaction
if (newTransaction == null)
{
throw new ArgumentNullException(nameof(newTransaction), "Transaction details cannot be null.");

}

if (string.IsNullOrWhiteSpace(newTransaction.Title))
{
throw new ArgumentException("Title is required.", nameof(newTransaction.Title));
}

if (newTransaction.Amount <= 0)
{
throw new ArgumentException("Amount must be greater than zero.", nameof(newTransaction.Amount));
}

if (string.IsNullOrWhiteSpace(newTransaction.Type))
{
throw new ArgumentException("Transaction type is required.", nameof(newTransaction.Type));
}

// Add the transaction
recentTransactions.Add(new Transaction
{
Title = newTransaction.Title,
Date = newTransaction.Date == default ? DateTime.Now : newTransaction.Date,
Amount = newTransaction.Amount,
Type = newTransaction.Type,
Tags = newTransaction.Tags,
Notes = newTransaction.Notes,
Status = newTransaction.Type == "Debt" ? (newTransaction.Status ?? "Pending") : null // Default to "Pending" for Debt
});
Console.WriteLine("Transaction added successfully.");
// Check if the transaction is of type 'Debt'

if (newTransaction.Type == "Debt")
{
// Create a new debt entry
var newDebt = new Transaction
{
Title = newTransaction.Title,
Date = newTransaction.Date,
DueDate = newTransaction.Date.AddMonths(1),  // Set due date to 1 month from the transaction date
Amount = newTransaction.Amount,
Tags = newTransaction.Tags,
Status = newTransaction.Status,
Source = newTransaction.Notes // Assuming Notes are the source of the debt
};

// Add the new debt to the pending debts list
pendingDebts.Add(newDebt);
}

// Recalculate totals
CalculateTotals();
}
catch (Exception ex)
{
// Log the error (if logging is set up) or display an error message
Console.WriteLine($"Error adding transaction: {ex.Message}");
// Optionally, display an error message to the user using a notification mechanism
}

{
// Ensure the modal is always closed, even in case of exceptions
CloseModal();
}
}


private void CalculateTotals()
{
totalIncome = recentTransactions.Where(t => t.Type == "Income").Sum(t => t.Amount);
totalExpense = recentTransactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
totalDebt = recentTransactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
pendingDebt = recentTransactions.Where(t => t.Type == "Debt" && t.Status == "Pending").Sum(t => t.Amount);
clearedDebt = recentTransactions.Where(t => t.Type == "Debt" && t.Status == "Cleared").Sum(t => t.Amount);
totalBalance = totalIncome - totalExpense + totalDebt;
}


}
