@page "/dashboard"
@using Expense_Tracker.Model
@using Expense_Tracker.Services
@* @using Expense_Tracker.Components.Layout *@
@inject ITransactionService TransactionService
@inject NavigationManager NavigationManager
<style>
    h1 {
        font-size: 2.5rem;
        color: #343a40;
    }

    .card-title {
        font-size: 1.25rem;
        color: #495057;
    }

    .table {
        margin-bottom: 0;
    }

    .table th {
        text-transform: uppercase;
        font-size: 0.9rem;
    }

    .table td, .table th {
        vertical-align: middle;
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .btn-outline-secondary {
        color: #6c757d;
        border-color: #6c757d;
    }

    .btn-outline-secondary:hover {
        background-color: #6c757d;
        color: #fff;
    }
    .container{
        background-color: #273240;
    }

    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 10px;
    }
   
    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

    .transaction-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }


</style>

<div class="card shadow-sm">
    
    <div class="card-body">
        <h3 class="fw-bold text-uppercase"  style="color:black">Dashboard</h3>
        <h4 class="fw-bold"  style="color:black">Total Balance: @totalBalance </h4>
        <!-- Header Section -->
        
        <!-- Dashboard Cards -->
        <div class="row">
            <div class="col-md-4">
                <div class="dashboard-card bg-dark text-white text-center">
                    <h5>Total Cash Inflows</h5>
                    <h2>@totalIncome</h2>
                    <p>@incomeTransactionCount</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="dashboard-card bg-dark text-white text-center">
                    <h5>Total Cash Outflows</h5>
                    <h2>@totalExpense</h2>
                    <p>@expenseTransactionCount</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="dashboard-card bg-dark text-white text-center">
                    <h5>Total Debts</h5>
                    <h2>@totalDebt</h2>
                    <p>@debtTransactionCount</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="dashboard-card bg-dark text-white text-center">
                    <h5>Pending Debts</h5>
                    <h2>@pendingDebt</h2>
                    <p>@pendingDebtTransactionCount</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="dashboard-card bg-dark text-white text-center">
                    <h5>Cleared Debts</h5>
                    <h2>@clearedDebt</h2>
                    <p>@clearedDebtTransactionCount</p>
                </div>
            </div>
        </div>

        <!-- Date Range Filter Section -->
        <div class="d-flex align-items-center mb-3">
            <label for="startDate" class="me-2" >Start Date:</label>
            <input type="date" id="startDate" class="form-control me-3"  @bind="startDate" />

            <label for="endDate" class="me-2" >End Date:</label>
            <input type="date" id="endDate" class="form-control me-3"  @bind="endDate" />

            <button class="btn btn-primary" @onclick="FilterByDateRange">Filter</button>
            <button class="btn btn-secondary ms-2" @onclick="ClearFilters">Clear</button>
        </div>
        
        <!-- Top 5 Transactions Section -->
        <div class="card shadow-sm mb-4 top-transactions">
            <div class="card-body">
                <h5 class="card-title text-uppercase fw-bold">Top 5 Transactions</h5>
                <div class="transaction-list">
                    @foreach (var transaction in top5Transactions)
                    {
                    <div class="transaction-item">
                        <div>@transaction.Title</div>
                        <div class="amount">@transaction.Amount</div>
                        <div>@transaction.Date.ToString("yyyy-MM-dd")</div>
                    </div>
                    }
                </div>
            </div>
        </div>
        
        
        <!-- Transaction Highlight Section -->
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <h5 class="card-title text-uppercase fw-bold">Transaction List</h5>
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                        <tr>
                            <th>Title</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Tags</th>
                            <th>Type</th>
                            <th>Notes</th>

                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.Title</td>
                                <td>@transaction.Amount</td>
                                <td>@transaction.Date.ToString("yyyy-MM-dd")</td>
                                <td>@transaction.Tags</td>
                                <td class="@(transaction.Type == "Income" ? "text-success" : transaction.Type == "Expense" ? "text-danger" : "text-warning")">@transaction.Type</td>
                                <td>@transaction.Notes</td>

                            </tr>

                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pending Debts Section -->
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-uppercase fw-bold">Pending Debts</h5>
                <div class="table-responsive">
                    <table class="table table-bordered align-middle">
                        <thead class="table-light">
                        <tr>
                            <th>Title</th>
                            <th>Added Date</th>
                            <th>Due Date</th>
                            <th>Amount</th>
                            <th>Tags</th>
                            <th>Status</th>
                            @* <th>Notes</th> *@
                        </tr>
                        </thead>
                        <tbody>

                        @foreach (var debt in pendingDebts)
                        {
                            <tr>
                                <td>@debt.Title</td>
                                <td>@debt.Date.ToString("yyyy-MM-dd")</td>
                                <td>@debt.DueDate.ToString("yyyy-MM-dd")</td>
                                <td>@debt.Amount</td>
                                <td>@debt.Tags</td>
                                @* <td>@debt.Notes</td> *@
                                <td class="badge bg-danger">@debt.Status</td>
                                
                            </tr>

                        }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> recentTransactions = new();
    private List<Transaction> pendingDebts = new();
    private List<Transaction> filteredTransactions = new();
    private DateTime? startDate;
    private DateTime? endDate;
    private string filterErrorMessage;
    private bool displayFilters = false;
    private decimal currentBalance;
    private string feedbackMessage;



    private decimal totalIncome;
    private decimal totalExpense;
    private decimal totalDebt;
    private decimal pendingDebt;
    private decimal clearedDebt;
    private decimal totalBalance;

    private int incomeTransactionCount;
    private int expenseTransactionCount;
    private int debtTransactionCount;
    private int pendingDebtTransactionCount;
    private int clearedDebtTransactionCount;

    private List<Transaction> top5Transactions = new();
    private Transaction newTransaction = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactions();
        filteredTransactions = new List<Transaction>(recentTransactions);
        top5Transactions = GetTop5Transactions();
    }

    private async Task LoadTransactions()
    {
        // Load the transactions
        recentTransactions = await TransactionService.GetTransactionsAsync();
        totalIncome = await TransactionService.GetTotalIncomeAsync();
        totalExpense = await TransactionService.GetTotalExpenseAsync();
        totalDebt = await TransactionService.GetTotalDebtAsync();
        pendingDebt = await TransactionService.GetPendingDebtAsync();
        clearedDebt = await TransactionService.GetClearedDebtAsync();

        totalBalance = totalIncome - totalExpense + pendingDebt;
        pendingDebts = recentTransactions.Where(t => t.Type == "Debt" && t.Status == "Pending").ToList();
        CalculateTotals();
        

        // Calculate transaction counts
        CalculateTransactionCounts();
    }

    private void CalculateTotals()
    {
        totalIncome = recentTransactions.Where(t => t.Type == "Income").Sum(t => t.Amount) - clearedDebt;
        totalExpense = recentTransactions.Where(t => t.Type == "Expense").Sum(t => t.Amount);
        totalDebt = recentTransactions.Where(t => t.Type == "Debt").Sum(t => t.Amount);
        pendingDebt = recentTransactions.Where(t => t.Type == "Debt" && t.Status == "Pending").Sum(t => t.Amount);
        clearedDebt = recentTransactions.Where(t => t.Type == "Debt" && t.Status == "Cleared").Sum(t => t.Amount);
        totalBalance = totalIncome - totalExpense + totalDebt;


    }

    private void CalculateTransactionCounts()
    {
        incomeTransactionCount = recentTransactions.Count(t => t.Type == "Income");
        expenseTransactionCount = recentTransactions.Count(t => t.Type == "Expense");
        debtTransactionCount = recentTransactions.Count(t => t.Type == "Debt");
        pendingDebtTransactionCount = recentTransactions.Count(t => t.Type == "Debt" && t.Status == "Pending");
        clearedDebtTransactionCount = recentTransactions.Count(t => t.Type == "Debt" && t.Status == "Cleared");
    }

    private List<Transaction> GetTop5Transactions()
    {
        // Sort the transactions by amount in descending order and take the top 5
        return recentTransactions.OrderByDescending(t => t.Amount).Take(5).ToList();
    }



    private void FilterByDateRange()
    {
        if (startDate.HasValue && endDate.HasValue)
        {
            if (startDate.Value > endDate.Value)
            {
                // Invalid range: Start date is after end date
                filterErrorMessage = "Start date cannot be after the end date.";
                filteredTransactions = new List<Transaction>(); // Clear filtered transactions
                displayFilters = false;
            }
            else
            {
                // Valid range: Apply the filter
                filterErrorMessage = string.Empty; // Clear any existing error message
                filteredTransactions = recentTransactions
                    .Where(t => t.Date.Date >= startDate.Value.Date && t.Date.Date <= endDate.Value.Date)
                    .ToList();
                displayFilters = true;
            }
        }
        else
        {
            // Filters are not set
            filterErrorMessage = "Please select both a start date and an end date.";
            filteredTransactions = new List<Transaction>(recentTransactions); // Clear filtered transactions
            displayFilters = false;
        }

    }


    private void ClearFilters()
    {
        startDate = null;
        endDate = null;
        filterErrorMessage = string.Empty;
        filteredTransactions = new List<Transaction>(recentTransactions);
        displayFilters = false;
    }

}
